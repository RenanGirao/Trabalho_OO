@startuml
' Pacote de entidades de domínio
package entidades {
  
  ' Classe abstrata de usuário
  abstract class Usuario {
    - id: String
    - nomeCompleto: String
    - emailInstitucional: String
    - telefone: String
    - senha: String
    + login(): boolean
  }
  
  ' Subclasses de usuário
  class Aluno extends Usuario {
    - curso: String
    - matricula: String
    - semestre: int
  }
  abstract class Servidor extends Usuario {
    - matriculaInstitucional: String
  }
  class Professor extends Servidor {
    - cursoMinistrado: String
    - cargoAcademico: CargoAcademico
  }
  class ServidorAdministrativo extends Servidor {
    - funcao: String
    - departamento: String
  }

  ' Espaços físicos
  abstract class EspacoFisico {
    - id: String
    - nome: String
    - capacidade: int
    - localizacao: String
    - horariosDisponiveis: List<TimeSlot>
    + isDisponivel(ts: TimeSlot): boolean
  }
  class SalaAula extends EspacoFisico
  class Laboratorio extends EspacoFisico
  class Auditorio extends EspacoFisico
  class SalaEstudo extends EspacoFisico

  ' Equipamentos ligados a cada espaço
  class Equipamento {
    - id: String
    - nome: String
    - descricao: String
  }

  ' Reserva propriamente dita
  class Reserva {
    - id: String
    - dataInicio: LocalDateTime
    - dataFim: LocalDateTime
    - status: StatusReserva
    + cancelar(): void
  }

  ' Classes de apoio
  class TimeSlot {
    - diaSemana: DayOfWeek
    - horaInicio: LocalTime
    - horaFim: LocalTime
  }
  enum CargoAcademico {
    AUXILIAR
    ASSISTENTE
    ADJUNTO
    ASSOCIADO
    TITULAR
  }
  enum StatusReserva {
    CONFIRMADA
    CANCELADA
  }

  ' Associações e multiplicidades
  Usuario "1" -- "0..*" Reserva : faz
  EspacoFisico "1" -- "0..*" Reserva : reserva
  EspacoFisico "1" -- "0..*" Equipamento : possui >
}

' Pacote de serviços
package servicos {
  class ServicoReserva {
    + agendar(u: Usuario, e: EspacoFisico, inicio: LocalDateTime, fim: LocalDateTime)
        : Reserva throws HorarioIndisponivelException, DiasExcedidosException
    + cancelar(res: Reserva): void
    + gerarRelatorioUsuario(u: Usuario): List<Reserva>
    + gerarRelatorioEspaco(e: EspacoFisico, inicio: LocalDateTime, fim: LocalDateTime)
        : List<Reserva>
    + exportarRelatorio(reservas: List<Reserva>, formato: FormatoExportacao): void
  }
  enum FormatoExportacao {
    TXT
    CSV
  }
}

' Pacote de exceções personalizadas
package excecoes {
  class HorarioIndisponivelException extends Exception
  class DiasExcedidosException extends Exception
}
@enduml
